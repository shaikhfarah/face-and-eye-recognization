# -*- coding: utf-8 -*-
"""face and eye recognization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a3eMo4-YRWSWr3fAgpCsQRYwtGYrP8AS
"""

pip install opencv-python

pip install opencv_jupyter_ui



import cv2
import opencv_jupyter_ui as jcv2
from google.colab.patches import cv2_imshow

# Load the pre-trained face and eye detection models
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')

# Load the input image
image_path = 'boy2.jpeg'
image = cv2.imread(image_path)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Detect faces in the image
faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

# Iterate over detected faces and eyes
for (x, y, w, h) in faces:
    cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 2)
    roi_gray = gray[y:y + h, x:x + w]
    roi_color = image[y:y + h, x:x + w]
    eyes = eye_cascade.detectMultiScale(roi_gray)
    for (ex, ey, ew, eh) in eyes:
        cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)

# Save or display the image with detected faces and eyes
output_image_path = 'output_image.jpg'
cv2.imwrite(output_image_path, image)

# Display the output image
jcv2.imshow('Face and Eye Recognition', image)
cv2.waitKey(0)
cv2.destroyAllWindows()